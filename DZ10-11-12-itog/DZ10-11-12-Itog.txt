
DZ 10. Разработать приложение мессенджера (desktop). Требуется написать use case диаграмму, выбрать архитектуру для приложения (кратко обосновать выбор), UML и ER диаграммы для выбранной архитектуры. 
Используя метод персон (не менее 3), описать каких функций не хватает. Пересмотреть UML и ER диаграммы с учетом недостатков. Создать интерфейс в figma для приложения.


b. Экранные формы, компоненты интерфейса (поля, кнопки, чек-боксы, ..), инструмент https://www.figma.com/ или https://app.diagrams.net/


	https://www.figma.com/file/CU3csdF5NNL9X4Dv5j37bu/DZ10?type=design&node-id=993-13&mode=design&t=J3WyM7x0OfrNWxWs-0

с. Разработать полную ERD домена в https://www.dbdesigner.net/.

        http://127.0.0.1/phpmyadmin/index.php?route=/database/designer&db=messager


DZ 11.Расписать какие технологие вы бы использовали для реализации архитектуры, заложенной в предыдущей домашней работе. Коротко объяснить свой выбор.
	*База данных
		- PostgreSQL - для хранения контактов... Объектно-реляционная(сущность-связь) бесплатная СУБД, широко используемая в мире, производительная. 
			Поддерживается такими платформами, как Linux, Win32, Mac OS X, Solaris/OpenSolaris, FreeBSD, QNX 4.25, QNX 6.
		- MongoDB — для хранения сообщений. Это документоориентированная нереляционная СУБД, которая распространяется по лицензии SSPL и имеет открытый исходный код.
			База состоит из коллекций и документов — иерархических структур, содержащих пары «ключ — значение» (поля).
	*Веб-приложение
		-Vue.js — JavaScript-фреймворк с открытым исходным кодом для создания пользовательских интерфейсов.
			Vue.js - для создания кроссплатформенных настольных приложений для основных операционных систем, таких как Windows, Linux и MAC.
		- Серверная часть - приложение WebApi, контейнеризация Docker.	
		- Клиентская часть - Desktop  приложение WPF (архитектура MVVM), больше возможности делать гибкие интерфейсы.
                Desktop приложение, чтобы легче взаимодействовать с ОС ПК, а язык JavaScript в этом отлично помогает.
	*Хранилище кода
		- GitHab - бесплатный сервис хранения кода,возможность заниматься совместной разработкой. 
                Позволяет настраивать CI/CD для развертывания кода из репозитория на облачные сервисы- Kubernetes.
	*Облачное развертывание
		- Kubernetes - бесплатный сервис, позволяет развертывать контейнеры Docker.

DZ 12. Принципы тестирования приложений

	I.Тесты прав доступа отправителя:	
		1)пользователь может выполнить операцию:привязать,записать,иметь возможность выбрать,отправить контакты,смайлы,видео,аудио,специальные функции инженера и т.п..
		2)пользователь выполнить эти операции не может.
		3)как ведет себя продукт при невозможности выполнить операцию.
		4)создание диалога с выбранным контактом(получателем).

	II.Тесты - создание сообщения:
		1)набор текста
		2)отображение текста
		3)смайлы,видео,аудио,специальные функции инженера и т.п. : 
			-отображение для выбора	
			-выбор
			-добавить
			-привязка и позиция в текстесе сообщения 
			-сохранение во временном хранилище
			-создать, записать,сохранить,выбрать, позиционировать,привязать к текстовому сообщению,сохранить во временное хранилище новую видео или аудио запись  с внешнего устройства
		4)отправка сообщения:
			-отправлено к получателю
			-изменение статуса
			-сохранение диалога привязаны и сохранены
			-проверка,что все вложения к сообщению 
		5)чтения сообщений:
			-отметка,что сообщение доставлено
			-отобразить,что сообщение доступно к просмотру
			-сообщение отображается у получателя корректно
			-отметка,что сообщение прочитано и количество не прочитанных сообщений







